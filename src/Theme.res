type themeOpts = {
  useSystemColorMode?: bool,
  initialColorMode?: [#dark | #light],
}

type containerSizes = {
  sm?: int,
  md?: int,
  lg?: int,
  xl?: int,
}

type sizes = {
  container: containerSizes,
  \"3xs"?: int,
  \"2xs"?: int,
  xs?: int,
  sm?: int,
  md?: int,
  lg?: int,
  xl?: int,
  \"2xl"?: int,
  px?: string,
  \"0"?: int,
  \"0.5"?: int,
  \"1"?: int,
  \"1.5"?: int,
  \"2"?: int,
  \"2.5"?: int,
  \"3"?: int,
  \"3.5"?: int,
  \"4"?: int,
  \"5"?: int,
  \"6"?: int,
  \"7"?: int,
  \"8"?: int,
  \"9"?: int,
  \"10"?: int,
  \"12"?: int,
  \"16"?: int,
  \"20"?: int,
  \"24"?: int,
  \"32"?: int,
  \"40"?: int,
  \"48"?: int,
  \"56"?: int,
  \"64"?: int,
  \"72"?: int,
  \"80"?: int,
  \"96"?: int,
  \"1/2"?: string,
  \"1/3"?: string,
  \"2/3"?: string,
  \"1/4"?: string,
  \"2/4"?: string,
  \"3/4"?: string,
  \"1/5"?: string,
  \"2/5"?: string,
  \"3/5"?: string,
  \"4/5"?: string,
  \"1/6"?: string,
  \"2/6"?: string,
  \"3/6"?: string,
  \"4/6"?: string,
  \"5/6"?: string,
  full?: string,
}
type space = {
  px?: string,
  \"0"?: int,
  \"0.5"?: int,
  \"1"?: int,
  \"1.5"?: int,
  \"2"?: int,
  \"2.5"?: int,
  \"3"?: int,
  \"3.5"?: int,
  \"4"?: int,
  \"5"?: int,
  \"6"?: int,
  \"7"?: int,
  \"8"?: int,
  \"9"?: int,
  \"10"?: int,
  \"12"?: int,
  \"16"?: int,
  \"20"?: int,
  \"24"?: int,
  \"32"?: int,
  \"40"?: int,
  \"48"?: int,
  \"56"?: int,
  \"64"?: int,
  \"72"?: int,
  \"80"?: int,
  \"96"?: int,
  \"1/2"?: string,
  \"1/3"?: string,
  \"2/3"?: string,
  \"1/4"?: string,
  \"2/4"?: string,
  \"3/4"?: string,
  \"1/5"?: string,
  \"2/5"?: string,
  \"3/5"?: string,
  \"4/5"?: string,
  \"1/6"?: string,
  \"2/6"?: string,
  \"3/6"?: string,
  \"4/6"?: string,
  \"5/6"?: string,
  full?: string,
}
type hue = {
  \"50"?: string,
  \"100"?: string,
  \"200"?: string,
  \"300"?: string,
  \"400"?: string,
  \"500"?: string,
  \"600"?: string,
  \"700"?: string,
  \"800"?: string,
  \"900"?: string,
}

type colors = {
  contrastThreshold?: int,
  white?: string,
  black?: string,
  lightText?: string,
  darkText?: string,
  rose?: hue,
  pink?: hue,
  fuchsia?: hue,
  purple?: hue,
  violet?: hue,
  indigo?: hue,
  blue?: hue,
  lightBlue?: hue,
  darkBlue?: hue,
  cyan?: hue,
  teal?: hue,
  emerald?: hue,
  green?: hue,
  lime?: hue,
  yellow?: hue,
  amber?: hue,
  orange?: hue,
  red?: hue,
  warmGray?: hue,
  trueGray?: hue,
  gray?: hue,
  coolGray?: hue,
  blueGray?: hue,
  dark?: hue,
  text?: hue,
  danger?: hue,
  error?: hue,
  success?: hue,
  warning?: hue,
  muted?: hue,
  primary?: hue,
  info?: hue,
  secondary?: hue,
  light?: hue,
  tertiary?: hue,
}

type fonts = {
  heading?: string,
  body?: string,
  mono?: string,
}

type fontSizes = {
  \"'2xs'"?: int,
  xs?: int,
  sm?: int,
  md?: int,
  lg?: int,
  xl?: int,
  \"'2xl'"?: int,
  \"'3xl'"?: int,
  \"'4xl'"?: int,
  \"'5xl'"?: int,
  \"'6xl'"?: int,
  \"'7xl'"?: int,
  \"'8xl'"?: int,
  \"'9xl'"?: int,
}

type borderWidths = {
  \"'0'"?: int,
  \"'1'"?: string,
  \"'2'"?: string,
  \"'4'"?: string,
  \"'8'"?: string,
}

type breakpoints = {
  base?: int,
  sm?: int,
  md?: int,
  lg?: int,
  xl?: int,
  \"'2xl'"?: int,
}

type baseStyle = {
  m?: string,
  margin?: string,
  mt?: string,
  marginTop?: string,
  mr?: string,
  marginRight?: string,
  mb?: string,
  marginBottom?: string,
  ml?: string,
  marginLeft?: string,
  mx?: string,
  my?: string,
  p?: string,
  padding?: string,
  pt?: string,
  paddingTop?: string,
  pr?: string,
  paddingRight?: string,
  pb?: string,
  paddingBottom?: string,
  pl?: string,
  paddingLeft?: string,
  px?: string,
  py?: string,
  color?: string,
  bg?: string,
  background?: string,
  bgColor?: string,
  opacity?: string,
  fontFamily?: string,
  fontSize?: string,
  fontWeight?: string,
  lineHeight?: string,
  letterSpacing?: string,
  textAlign?: string,
  fontStyle?: string,
  textTransform?: string,
  textDecoration?: string,
  w?: string,
  width?: string,
  h?: string,
  height?: string,
  minW?: string,
  minWidth?: string,
  maxW?: string,
  maxWidth?: string,
  minH?: string,
  minHeight?: string,
  maxH?: string,
  maxHeight?: string,
  d?: string,
  display?: string,
  boxSize?: string,
  verticalAlign?: string,
  overflow?: string,
  overflowX?: string,
  overflowY?: string,
  alignItems?: string,
  align?: string,
  alignContent?: string,
  justifyItems?: string,
  justifyContent?: string,
  justify?: string,
  flexWrap?: string,
  wrap?: string,
  flexDirection?: string,
  flexDir?: string,
  direction?: string,
  flex?: string,
  flexGrow?: string,
  flexShrink?: string,
  flexBasis?: string,
  justifySelf?: string,
  alignSelf?: string,
  order?: string,
  borderWidth?: string,
  borderStyle?: string,
  borderColor?: string,
  borderTop?: string,
  borderTopWidth?: string,
  borderTopStyle?: string,
  borderTopColor?: string,
  borderRight?: string,
  borderRightWidth?: string,
  borderRightStyle?: string,
  borderRightColor?: string,
  borderBottom?: string,
  borderBottomWidth?: string,
  borderBottomStyle?: string,
  borderBottomColor?: string,
  borderLeft?: string,
  borderLeftWidth?: string,
  borderLeftStyle?: string,
  borderLeftColor?: string,
  borderRadius?: string,
  rounded?: string,
  borderTopLeftRadius?: string,
  roundedTopLeft?: string,
  borderTopRightRadius?: string,
  roundedTopRight?: string,
  borderBottomRightRadius?: string,
  roundedBottomRight?: string,
  borderBottomLeftRadius?: string,
  roundedBottomLeft?: string,
  borderTopRadius?: string,
  roundedTop?: string,
  borderRightRadius?: string,
  roundedRight?: string,
  borderBottomRadius?: string,
  roundedBottom?: string,
  borderLeftRadius?: string,
  roundedLeft?: string,
  pos?: string,
  position?: string,
  zIndex?: string,
  top?: string,
  right?: string,
  bottom?: string,
  left?: string,
  shadow?: string,
}

type componentOptions<'t> = {
  baseStyle?: {"colorMode": string} => baseStyle,
  variants?: Js.Dict.t<{"colorMode": string} => baseStyle>,
  defaultProps?: 't,
}
// TODO: Replace these JS Dicts
type components = {
  \"Accordion"?: componentOptions<Js.Dict.t<string>>,
  \"AccordionDetails"?: componentOptions<Js.Dict.t<string>>,
  \"AccordionIcon"?: componentOptions<Js.Dict.t<string>>,
  \"AccordionItem"?: componentOptions<Js.Dict.t<string>>,
  \"AccordionSummary"?: componentOptions<Js.Dict.t<string>>,
  \"Actionsheet"?: componentOptions<Js.Dict.t<string>>,
  \"ActionsheetContent"?: componentOptions<Js.Dict.t<string>>,
  \"ActionsheetItem"?: componentOptions<Js.Dict.t<string>>,
  \"Alert"?: componentOptions<Js.Dict.t<string>>,
  \"AlertDialog"?: componentOptions<Js.Dict.t<string>>,
  \"AlertDialogBody"?: componentOptions<Js.Dict.t<string>>,
  \"AlertDialogCloseButton"?: componentOptions<Js.Dict.t<string>>,
  \"AlertDialogContent"?: componentOptions<Js.Dict.t<string>>,
  \"AlertDialogFooter"?: componentOptions<Js.Dict.t<string>>,
  \"AlertDialogHeader"?: componentOptions<Js.Dict.t<string>>,
  \"AlertDialogOverlay"?: componentOptions<Js.Dict.t<string>>,
  \"AlertIcon"?: componentOptions<Js.Dict.t<string>>,
  \"AppBar"?: componentOptions<Js.Dict.t<string>>,
  \"AspectRatio"?: componentOptions<Js.Dict.t<string>>,
  \"Avatar"?: componentOptions<Js.Dict.t<string>>,
  \"AvatarBadge"?: componentOptions<Js.Dict.t<string>>,
  \"AvatarGroup"?: componentOptions<Js.Dict.t<string>>,
  \"Badge"?: componentOptions<Js.Dict.t<string>>,
  \"Box"?: componentOptions<Js.Dict.t<string>>,
  \"Breadcrumb"?: componentOptions<Js.Dict.t<string>>,
  \"BreadcrumbIcon"?: componentOptions<Js.Dict.t<string>>,
  \"BreadcrumbText"?: componentOptions<Js.Dict.t<string>>,
  \"Button"?: componentOptions<Js.Dict.t<string>>,
  \"ButtonGroup"?: componentOptions<Js.Dict.t<string>>,
  \"Card"?: componentOptions<Js.Dict.t<string>>,
  \"Center"?: componentOptions<Js.Dict.t<string>>,
  \"Checkbox"?: componentOptions<Js.Dict.t<string>>,
  \"CheckboxGroup"?: componentOptions<Js.Dict.t<string>>,
  \"Circle"?: componentOptions<Js.Dict.t<string>>,
  \"CircularProgress"?: componentOptions<Js.Dict.t<string>>,
  \"Code"?: componentOptions<Js.Dict.t<string>>,
  \"Container"?: componentOptions<Js.Dict.t<string>>,
  \"Divider"?: componentOptions<Js.Dict.t<string>>,
  \"FAB"?: componentOptions<Js.Dict.t<string>>,
  \"Fade"?: componentOptions<Js.Dict.t<string>>,
  \"FlatList"?: componentOptions<Js.Dict.t<string>>,
  \"Flex"?: componentOptions<Js.Dict.t<string>>,
  \"FormControl"?: componentOptions<Js.Dict.t<string>>,
  \"FormControlErrorMessage"?: componentOptions<Js.Dict.t<string>>,
  \"FormControlHelperText"?: componentOptions<Js.Dict.t<string>>,
  \"FormControlLabel"?: componentOptions<Js.Dict.t<string>>,
  \"Heading"?: componentOptions<Js.Dict.t<string>>,
  \"HStack"?: componentOptions<Js.Dict.t<string>>,
  \"Icon"?: componentOptions<Js.Dict.t<string>>,
  \"IconButton"?: componentOptions<Js.Dict.t<string>>,
  \"Image"?: componentOptions<Js.Dict.t<string>>,
  \"Input"?: componentOptions<Js.Dict.t<string>>,
  \"InputLeftAddon"?: componentOptions<Js.Dict.t<string>>,
  \"InputRightAddon"?: componentOptions<Js.Dict.t<string>>,
  \"Kbd"?: componentOptions<Js.Dict.t<string>>,
  \"KeyboardAvoidingView"?: componentOptions<Js.Dict.t<string>>,
  \"Link"?: componentOptions<Js.Dict.t<string>>,
  \"List"?: componentOptions<Js.Dict.t<string>>,
  \"ListIcon"?: componentOptions<Js.Dict.t<string>>,
  \"ListItem"?: componentOptions<Js.Dict.t<string>>,
  \"Menu"?: componentOptions<Js.Dict.t<string>>,
  \"MenuGroup"?: componentOptions<Js.Dict.t<string>>,
  \"MenuItem"?: componentOptions<Js.Dict.t<string>>,
  \"Modal"?: componentOptions<Js.Dict.t<string>>,
  \"ModalBody"?: componentOptions<Js.Dict.t<string>>,
  \"ModalCloseButton"?: componentOptions<Js.Dict.t<string>>,
  \"ModalContent"?: componentOptions<Js.Dict.t<string>>,
  \"ModalFooter"?: componentOptions<Js.Dict.t<string>>,
  \"ModalHeader"?: componentOptions<Js.Dict.t<string>>,
  \"ModalOverlay"?: componentOptions<Js.Dict.t<string>>,
  \"NumberInput"?: componentOptions<Js.Dict.t<string>>,
  \"NumberInputStepper"?: componentOptions<Js.Dict.t<string>>,
  \"PinInput"?: componentOptions<Js.Dict.t<string>>,
  \"PopoverArrow"?: componentOptions<Js.Dict.t<string>>,
  \"PopoverBody"?: componentOptions<Js.Dict.t<string>>,
  \"PopoverCloseButton"?: componentOptions<Js.Dict.t<string>>,
  \"PopoverContent"?: componentOptions<Js.Dict.t<string>>,
  \"PopoverFooter"?: componentOptions<Js.Dict.t<string>>,
  \"PopoverHeader"?: componentOptions<Js.Dict.t<string>>,
  \"Pressable"?: componentOptions<Js.Dict.t<string>>,
  \"Progress"?: componentOptions<Js.Dict.t<string>>,
  \"Radio"?: componentOptions<Js.Dict.t<string>>,
  \"RadioGroup"?: componentOptions<Js.Dict.t<string>>,
  \"ScaleFade"?: componentOptions<Js.Dict.t<string>>,
  \"ScrollView"?: componentOptions<Js.Dict.t<string>>,
  \"SectionList"?: componentOptions<Js.Dict.t<string>>,
  \"Select"?: componentOptions<Js.Dict.t<string>>,
  \"SelectItem"?: componentOptions<Js.Dict.t<string>>,
  \"SimpleGrid"?: componentOptions<Js.Dict.t<string>>,
  \"Skeleton"?: componentOptions<Js.Dict.t<string>>,
  \"SkeletonText"?: componentOptions<Js.Dict.t<string>>,
  \"Slide"?: componentOptions<Js.Dict.t<string>>,
  \"SlideFade"?: componentOptions<Js.Dict.t<string>>,
  \"Slider"?: componentOptions<Js.Dict.t<string>>,
  \"SliderFilledTrack"?: componentOptions<Js.Dict.t<string>>,
  \"SliderThumb"?: componentOptions<Js.Dict.t<string>>,
  \"SliderTrack"?: componentOptions<Js.Dict.t<string>>,
  \"Spacer"?: componentOptions<Js.Dict.t<string>>,
  \"Spinner"?: componentOptions<Js.Dict.t<string>>,
  \"Square"?: componentOptions<Js.Dict.t<string>>,
  \"Stack"?: componentOptions<Js.Dict.t<string>>,
  \"Stat"?: componentOptions<Js.Dict.t<string>>,
  \"StatusBar"?: componentOptions<Js.Dict.t<string>>,
  \"Switch"?: componentOptions<Js.Dict.t<string>>,
  \"Tabs"?: componentOptions<Js.Dict.t<string>>,
  \"Tag"?: componentOptions<Js.Dict.t<string>>,
  \"Text"?: componentOptions<Js.Dict.t<string>>,
  \"TextArea"?: componentOptions<Js.Dict.t<string>>,
  \"TextField"?: componentOptions<Js.Dict.t<string>>,
  \"Toast"?: componentOptions<Js.Dict.t<string>>,
  \"Tooltip"?: componentOptions<Js.Dict.t<string>>,
  \"TypeAheadSearchItem"?: componentOptions<Js.Dict.t<string>>,
  \"View"?: componentOptions<Js.Dict.t<string>>,
  \"VStack"?: componentOptions<Js.Dict.t<string>>,
  \"Wrap"?: componentOptions<Js.Dict.t<string>>,
  \"ZStack"?: componentOptions<Js.Dict.t<string>>,
}
type t
type baseTheme = {
  config?: themeOpts,
  sizes?: sizes,
  space?: space,
  colors?: colors,
  components?: components,
}
@module("native-base")
external extendTheme: baseTheme => t = "extendTheme"
